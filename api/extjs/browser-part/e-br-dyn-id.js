// jscs:ignore
// TODO: by label, by object data (like linkedItem), form navigations.

// TODO: rename to just e-br-get-id.js ? Because not all id's will be dynamic here.

// TODO: in debug mode track that id is NOT autogenerated (throw exception ? ).

// TODO: merge with e-br-search.js

(function () {
  'use strict';
  // Class to get dynamic id's.
  window.tiaEJ.dynId = {

    getCompByIdRef: function (id, ref) {
      var cmp = tiaEJ.search.byId(id).lookupReferenceHolder().lookupReference(ref);
      if (!cmp) {
        throw new Error('Component not found for container id: ' + id + ', reference: ' + ref);
      }
      return cmp;
    },

    getItemByText: function (cmp, text, searchPathMsg) {
      if (!cmp.items) {
        throw new Error('Component: ' + searchPathMsg + 'has no items');
      }
      var resItem = cmp.items
        .findBy(function (item) {
          return item.text === text;
        });
      if (!resItem) {
        throw new Error('Item not found for ' + searchPathMsg + ', text: ' + text);
      }
      return resItem;
    },

    /**
     * Gets dynamic id using id and reference.
     * @param id - component HTML id.
     * @param ref - reference inside component found by id.
     */
    getByIdRef: function (id, ref) {
      var cmp = this.getCompByIdRef(id, ref);
      return cmp.getId();
    },

    /**
     * Gets dynamic id of an item using container id, reference, localization key for text for item.
     * @param id - component HTML id.
     * @param ref - reference inside component found by id.
     * @param key - key in locale.
     */
    getByIdRefKey: function (id, ref, key) {
      var text = tiaEJ.getTextByLocKey(key);
      var cmp = this.getCompByIdRef(id, ref);
      var resItem = this.getItemByText(cmp, text, 'container id: ' + id + ', reference: ' + ref);
      return resItem.getId();
    },

    getTabIdByIdItemId: function (id, itemId) {
      var cmp = tiaEJ.search.byId(id).getTabBar().down('#' + itemId);
      if (!cmp) {
        throw new Error('Tab not found for container id: ' + id + ', itemId: ' + itemId);
      }
      return cmp.getId();
    },

    getTabIdByIdLocKey: function (id, key) {
      var text = tiaEJ.getTextByLocKey(key);
      return this.getTabIdByIdText(id, text);
    },

    getTabIdByIdText: function (id, text) {
      var cmp = tiaEJ.search.byId(id);
      if (cmp.isPanel) {
        cmp = cmp.getTabBar();
      }
      var resItem = this.getItemByText(cmp, text, 'container id: ' + id);
      return resItem.getId();
    }
  };
})();
